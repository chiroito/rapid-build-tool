# テナンシーの情報
data "oci_identity_tenancy" "tenancy" {
  tenancy_id = "${var.oraclecloud["tenancy_ocid"]}"
}

# バックアップ用のトークン
resource "oci_identity_auth_token" "backup_auth_token" {
  count = "${var.backup["auth_token"] == "" ? 1 : 0}"
  user_id = "${var.oraclecloud["user_ocid"]}"
  description = "Auto generated by Rapid Build Tool"
}
# https://www.terraform.io/docs/providers/oci/r/identity_auth_token.html

# Storage for backup
resource "oci_objectstorage_bucket" "backup_bucket" {
  compartment_id = "${var.backup["compartment_id"] == "" ? var.env["primary_compartment_ocid"] : var.backup["compartment_id"]}"
  name = "${var.backup["bucket_name"]}"
  namespace = "${data.oci_identity_tenancy.tenancy.name}"
  access_type = "NoPublicAccess"
  storage_tier = "${var.backup["storage_type"]}"
}
# see: https://www.terraform.io/docs/providers/oci/r/object_storage_bucket.html
# oci os object bulk-delete -bn <{var.backup["bucket_name"]}> -ns orasejapan --force

locals {
  backup_bucket = "https://swiftobjectstorage.${local.region}.oraclecloud.com/v1/${oci_objectstorage_bucket.backup_bucket.namespace}/${oci_objectstorage_bucket.backup_bucket.name}"
}


# Database for JCS repository #####################################################################
resource "oraclepaas_database_service_instance" "repository_db" {
  depends_on = [
    "oci_objectstorage_bucket.backup_bucket"]
  bring_your_own_license = "${var.bring_your_own_license["database"]}"
  edition = "SE"
  version = "${var.repodb["version"]}"
  shape = "${var.repodb["shape"]}"
  subscription_type = "HOURLY"
  region = "${local.region}"
  availability_domain = "${oci_core_subnet.repo_subnet.availability_domain}"
  subnet = "${oci_core_subnet.repo_subnet.id}"
  name = "${var.repodb["name"]}"
  description = "Auto generated by Rapid Build Tool"
  ssh_public_key = "${var.env["ssh_public_key"]}"
  database_configuration = {
    admin_password = "${var.repodb["password"]}"
    sid = "REPODB"
    backup_destination = "${var.backup["enable"] ? "BOTH" : "NONE"}"
    usable_storage = 50
  }
  backups = [
    {
      cloud_storage_container = "${var.backup["enable"] ? local.backup_bucket : ""}"
      cloud_storage_username = "${var.backup["enable"] ? var.backup["username"] : ""}"
      cloud_storage_password = "${var.backup["enable"] ? var.backup["auth_token"] : ""}"
    }
  ]
}


# https://www.terraform.io/docs/providers/oraclepaas/r/oraclepaas_database_service_instance.html

# Database for user application ###################################################################
resource "oci_database_db_system" "application_database" {

  license_model = "${var.bring_your_own_license["database"] ? "BRING_YOUR_OWN_LICENSE" : "LICENSE_INCLUDED"}"
  database_edition = "${var.app_db["edition"]}"
  shape = "${var.app_db["shape"]}"
  node_count = 1
  compartment_id = "${oci_core_subnet.app_db_subnet.compartment_id}"
  availability_domain = "${oci_core_subnet.app_db_subnet.availability_domain}"
  subnet_id = "${oci_core_subnet.app_db_subnet.id}"
  display_name = "${var.app_db["display_name"]}"
  hostname = "${var.app_db["hostname"]}"
  data_storage_size_in_gb = "${var.app_db["storage_size"]}"
  disk_redundancy = "${var.app_db["disk_redundancy"]}"
  ssh_public_keys = ["${var.env["ssh_public_key"]}"]

  db_home = {
    db_version = "${var.app_db["version"]}"
    database = {
      db_workload = "OLTP"
      admin_password = "${var.app_db["admin_password"]}"
      db_name = "orcl"
      pdb_name = "${var.app_db["name"]}"
      db_backup_config = {
        auto_backup_enabled = "${var.backup["enable"]}"
      }
    }
  }
}
# https://www.terraform.io/docs/providers/oci/r/database_db_system.html

# app db の private ip
data "oci_core_private_ips" "private_ips_in_app_db_subnet" {
  depends_on = [
    "oci_database_db_system.application_database"]
  subnet_id = "${oci_core_subnet.app_db_subnet.id}"
}
# https://www.terraform.io/docs/providers/oci/d/core_private_ips.html

data "null_data_source" "select_db_private_ip" {
  count = 1
  inputs = {
    db_private_ip = "${lookup(data.oci_core_private_ips.private_ips_in_app_db_subnet.private_ips[count.index], "ip_address")}"
  }
}

# Application Server ##############################################################################
resource "oraclepaas_java_service_instance" "application_server" {
  depends_on = [
    "oci_objectstorage_bucket.backup_bucket",
    "oraclepaas_database_service_instance.repository_db"]

  bring_your_own_license = "${var.bring_your_own_license["weblogic"]}"
  edition = "${var.app_server["edition"]}"
  service_version = "${var.app_server["version"]}"
  region = "${local.region}"
  availability_domain = "${oci_core_subnet.app_db_subnet.availability_domain}"
  subnet = "${oci_core_subnet.app_subnet.id}"
  name = "${var.app_server["display_name"]}"
  description = "Auto generated by Rapid Build Tool"
  backup_destination = "${var.backup["enable"] ? "BOTH" : "NONE"}"
  enable_admin_console = true
  ssh_public_key = "${var.env["ssh_public_key"]}"

  weblogic_server = {
    shape = "${var.app_server["shape_admin"]}"
    domain = {
      mode = "${var.app_server["mode"]}"
    }
    cluster = "${local.cluster[var.app_server["count_http_session"]==0?"APOnly":"APandCache"]}"
    database = {
      name = "${oraclepaas_database_service_instance.repository_db.name}"
      username = "sys"
      password = "${var.repodb["password"]}"
    }
    admin = {
      username = "${var.app_server["admin_user"]}"
      password = "${var.app_server["admin_password"]}"
    }
  }
  backups = [
    {
      cloud_storage_container = "${var.backup["enable"] ? local.backup_bucket : ""}"
      cloud_storage_username = "${var.backup["enable"] ? var.backup["username"] : ""}"
      cloud_storage_password = "${var.backup["enable"] ? var.backup["auth_token"] : ""}"
    }
  ]

  #  load_balancer {
  #    subnets = ["${oci_core_subnet.lb_subnet_primary.id}","${oci_core_subnet.lb_subnet_backup.id}"]
  #  }
}
# https://www.terraform.io/docs/providers/oraclepaas/r/oraclepaas_java_service_instance.html

# Application用サブネットにあるIPの一覧を取得
data "oci_core_private_ips" "private_ips_in_app_subnet" {
  depends_on = [
    "oraclepaas_java_service_instance.application_server"]

  #Optional
  subnet_id = "${oci_core_subnet.app_subnet.id}"

  filter = {
    name = "display_name"
    values = [
      ".+vm-[1-${var.app_server["count_app_server"]}]"]
    regex = true
  }
}
# https://www.terraform.io/docs/providers/oci/d/core_private_ips.html

# IPの一覧を配列にする
data "null_data_source" "select_app_private_ip" {
  count = "${var.app_server["count_app_server"]}"
  inputs = {
    app_private_ip = "${lookup(data.oci_core_private_ips.private_ips_in_app_subnet.private_ips[count.index], "ip_address")}"
  }
}

locals {
  app_private_ips = "${data.null_data_source.select_app_private_ip.*.outputs}"
}


# Load Balancer ###################################################################################
resource "oci_load_balancer_load_balancer" "application_lb" {
  count = "${local.is_need_lb ? 1 : 0 }"
  shape = "${var.lb["shape"]}"
  compartment_id = "${oci_core_subnet.lb_subnet_primary.compartment_id}"
  display_name = "${var.lb["display_name"]}"
  subnet_ids = [
    "${oci_core_subnet.lb_subnet_primary.id}",
    "${oci_core_subnet.lb_subnet_backup.id}"
  ]
}
# https://www.terraform.io/docs/providers/oci/r/load_balancer_load_balancer.html

# アプリケーションの転送先
resource "oci_load_balancer_backend" "application_backend" {
  count = "${(local.is_need_lb && local.app_mode == "LB") ? var.app_server["count_app_server"] : 0}"
  load_balancer_id = "${oci_load_balancer_load_balancer.application_lb.id}"
  backendset_name = "${oci_load_balancer_backend_set.application_backend_set.name}"
  ip_address = "${lookup(local.app_private_ips[count.index], "app_private_ip")}"
  port = "${local.app_https_port}"
  backup = false
  drain = false
  offline = false
  weight = 1
}
# https://www.terraform.io/docs/providers/oci/r/load_balancer_backend.html

resource "oci_load_balancer_backend_set" "application_backend_set" {
  count = "${(local.is_need_lb && local.app_mode == "LB") ? 1 : 0 }"
  name = "application_backend_set"
  load_balancer_id = "${oci_load_balancer_load_balancer.application_lb.id}"
  policy = "ROUND_ROBIN"

  health_checker = {
    port = "${local.app_http_port}"
    protocol = "HTTP"
    url_path = "/${var.app["context"]}/"
    return_code = 200
  }
}
# https://www.terraform.io/docs/providers/oci/r/load_balancer_backend_set.html

# LB の外部との接点
resource "oci_load_balancer_listener" "application_listener" {
  count = "${(local.is_need_lb && local.app_mode == "LB") ? 1 : 0 }"
  load_balancer_id = "${oci_load_balancer_load_balancer.application_lb.id}"
  name = "application_listener"
  default_backend_set_name = "${oci_load_balancer_backend_set.application_backend_set.name}"
  port = "${local.app_https_port}"
  protocol = "TCP"

  connection_configuration = {
    idle_timeout_in_seconds = "2"
  }
}
# https://www.terraform.io/docs/providers/oci/r/load_balancer_listener.html

# WebLogic管理コンソールの転送先
resource "oci_load_balancer_backend" "weblogic_admin_backend" {
  count = "${(local.is_need_lb && local.weblogic_admin_mode == "LB") ? 1 : 0 }"
  load_balancer_id = "${oci_load_balancer_load_balancer.application_lb.id}"
  backendset_name = "${oci_load_balancer_backend_set.weblogic_admin_backend_set.name}"
  ip_address = "${lookup(local.app_private_ips[0], "app_private_ip")}"
  port = "${local.admin_https_port}"
  backup = false
  drain = false
  offline = false
  weight = 1
}
# https://www.terraform.io/docs/providers/oci/r/load_balancer_backend.html

resource "oci_load_balancer_backend_set" "weblogic_admin_backend_set" {
  count = "${(local.is_need_lb && local.weblogic_admin_mode == "LB") ? 1 : 0 }"
  name = "weblogic_admin_backend_set"
  load_balancer_id = "${oci_load_balancer_load_balancer.application_lb.id}"
  policy = "ROUND_ROBIN"

  health_checker = {
    port = "${local.admin_http_port}"
    protocol = "HTTP"
    url_path = "/console/"
    return_code = 302
  }
}
# https://www.terraform.io/docs/providers/oci/r/load_balancer_backend_set.html

# LB の外部との接点
resource "oci_load_balancer_listener" "weblogic_admin_listener" {
  count = "${(local.is_need_lb && local.weblogic_admin_mode == "LB") ? 1 : 0 }"
  load_balancer_id = "${oci_load_balancer_load_balancer.application_lb.id}"
  name = "weblogic_admin"
  default_backend_set_name = "${oci_load_balancer_backend_set.weblogic_admin_backend_set.name}"
  port = "${local.admin_https_port}"
  protocol = "TCP"
  connection_configuration = {
    idle_timeout_in_seconds = "2"
  }
}
# https://www.terraform.io/docs/providers/oci/r/load_balancer_listener.html
